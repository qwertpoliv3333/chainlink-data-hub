"""
Block Beacon ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ Bitcoin —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏.
"""

import requests
import time

def fetch_latest_block():
    r = requests.get("https://blockstream.info/api/blocks")
    r.raise_for_status()
    return r.json()[0]

def fetch_block_details(block_hash):
    r = requests.get(f"https://blockstream.info/api/block/{block_hash}")
    r.raise_for_status()
    return r.json()

def analyze_block(block):
    tx_count = block["tx_count"]
    size_kb = block["size"] / 1024
    reward = 6.25  # –ø–æ–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å

    print(f"
üì¶ –ù–æ–≤—ã–π –±–ª–æ–∫: {block['height']}")
    print(f"üîó –•–µ—à: {block['id']}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(block['timestamp']))}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {size_kb:.2f} KB")
    print(f"üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")
    print(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: ~{reward} BTC")

    if tx_count > 3000:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ‚Äî –±–ª–æ–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω!")
    if size_kb > 1400:
        print("‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ—á—Ç–∏ –ø—Ä–µ–¥–µ–ª—å–Ω—ã–π ‚Äî –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!")

def main():
    print("üö® Block Beacon –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤...
")
    last_seen = None

    try:
        while True:
            latest = fetch_latest_block()
            if latest["id"] != last_seen:
                block = fetch_block_details(latest["id"])
                analyze_block(block)
                last_seen = latest["id"]
            time.sleep(30)
    except KeyboardInterrupt:
        print("
–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)

if __name__ == "__main__":
    main()
